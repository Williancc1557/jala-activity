name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Add permissions block for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/swarm-demo-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # This step would typically be handled by a deployment server with Docker Swarm access
      # Here we're showing the command that would be executed
      - name: Deploy to Swarm (documentation)
        if: github.event_name != 'pull_request'
        run: |
          echo "On your Docker Swarm manager node, you would run:"
          echo "docker service update --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo ${{ steps.meta.outputs.tags }} | cut -d' ' -f1) swarm_web"
